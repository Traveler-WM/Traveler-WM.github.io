<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ming&#39;s Blog</title>
  
  <subtitle>Stay hungry Stay foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-10T03:57:48.529Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ming</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker学习(二)之Docker常用命令</title>
    <link href="http://yoursite.com/2019/03/10/Docker%E5%AD%A6%E4%B9%A0(%E4%BA%8C)%E4%B9%8BDocker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/03/10/Docker学习(二)之Docker常用命令/</id>
    <published>2019-03-10T02:08:34.000Z</published>
    <updated>2019-03-10T03:57:48.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看Docker信息"><a href="#查看Docker信息" class="headerlink" title="查看Docker信息"></a>查看Docker信息</h1>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#显示Docker版本信息</span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line">#显示Docker系统信息</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><h1 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h1><h2 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h2>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#从Docker Hub查找镜像</span><br><span class="line">docker search [OPTIONS] TERM</span><br><span class="line">```   </span><br><span class="line">- automated :只列出 automated build类型的镜像；</span><br><span class="line">- --no-trunc :显示完整的镜像描述；</span><br><span class="line">- -s :列出收藏数不小于指定值的镜像。</span><br></pre></td></tr></table></figure><h1 id="查找收藏数大于30的java镜像"><a href="#查找收藏数大于30的java镜像" class="headerlink" title="查找收藏数大于30的java镜像"></a>查找收藏数大于30的java镜像</h1><p>   docker search -s 30 java<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## docker pull</span><br></pre></td></tr></table></figure></p><h1 id="Docker-Hub中拉取镜像"><a href="#Docker-Hub中拉取镜像" class="headerlink" title="Docker Hub中拉取镜像"></a>Docker Hub中拉取镜像</h1><p>   docker pull [OPTIONS] NAME[:Tag|DIGEST]</p><h1 id="下载java最新版镜像"><a href="#下载java最新版镜像" class="headerlink" title="下载java最新版镜像"></a>下载java最新版镜像</h1><p>   docker pull java</p><h1 id="下载所有名为java的镜像"><a href="#下载所有名为java的镜像" class="headerlink" title="下载所有名为java的镜像"></a>下载所有名为java的镜像</h1><p>   docker pull -a java<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## docker push</span><br></pre></td></tr></table></figure></p><h1 id="将本地镜像上传到镜像仓库，先登陆镜像仓库"><a href="#将本地镜像上传到镜像仓库，先登陆镜像仓库" class="headerlink" title="将本地镜像上传到镜像仓库，先登陆镜像仓库"></a>将本地镜像上传到镜像仓库，先登陆镜像仓库</h1><p>   docker push [OPTIONS] NAME[:TAG]</p><p>   #上传本地镜像mynginx:v1到镜像仓库中<br>   docker push mynginx:v1<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## Docker login/logout</span><br></pre></td></tr></table></figure></p><h1 id="登录到Docker-Hub"><a href="#登录到Docker-Hub" class="headerlink" title="登录到Docker Hub"></a>登录到Docker Hub</h1><p>   docker login -u 用户名 -p 密码</p><h1 id="登出Docker-Hub"><a href="#登出Docker-Hub" class="headerlink" title="登出Docker Hub"></a>登出Docker Hub</h1><p>   docker logout<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 本地镜像仓库</span><br><span class="line"></span><br><span class="line">## docker images</span><br></pre></td></tr></table></figure></p><h1 id="查看本地镜像列表"><a href="#查看本地镜像列表" class="headerlink" title="查看本地镜像列表"></a>查看本地镜像列表</h1><p>   docker images</p><h1 id="列出名为java的镜像列表"><a href="#列出名为java的镜像列表" class="headerlink" title="列出名为java的镜像列表"></a>列出名为java的镜像列表</h1><p>   docker images java<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## docker rmi</span><br></pre></td></tr></table></figure></p><h1 id="删除本地一个或多个镜像"><a href="#删除本地一个或多个镜像" class="headerlink" title="删除本地一个或多个镜像"></a>删除本地一个或多个镜像</h1><p>   docker rmi [OPTIONS] IMAGE [IMAGE…]  </p><h1 id="强制删除本地镜像my-nginx-v1"><a href="#强制删除本地镜像my-nginx-v1" class="headerlink" title="强制删除本地镜像my/nginx:v1"></a>强制删除本地镜像my/nginx:v1</h1><p>   docker rmi -f my/nginx:v1<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## docker build</span><br></pre></td></tr></table></figure></p><h1 id="使用Dockerfile创建镜像"><a href="#使用Dockerfile创建镜像" class="headerlink" title="使用Dockerfile创建镜像"></a>使用Dockerfile创建镜像</h1><p>   docker build [OPTIONS] PATH | URL | -<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS说明：</span><br><span class="line">- -t 指定镜像的名字 </span><br><span class="line">- -f 指定要使用的Dockerfile路径(Dockerfile 可不在当前路径下）</span><br><span class="line"></span><br><span class="line">实列:</span><br></pre></td></tr></table></figure></p><h1 id="最后的-代表使用当前目录的Dockerfile创建镜像"><a href="#最后的-代表使用当前目录的Dockerfile创建镜像" class="headerlink" title="最后的.代表使用当前目录的Dockerfile创建镜像"></a>最后的.代表使用当前目录的Dockerfile创建镜像</h1><p>   docker build -t my/nginx:v1 .</p><h1 id="使用URL-github-com-creack-docker-firefox-的-Dockerfile-创建镜像"><a href="#使用URL-github-com-creack-docker-firefox-的-Dockerfile-创建镜像" class="headerlink" title="使用URL github.com/creack/docker-firefox 的 Dockerfile 创建镜像"></a>使用URL github.com/creack/docker-firefox 的 Dockerfile 创建镜像</h1><p>   docker build github.com/creack/docker-firefox<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 容器管理</span><br><span class="line"></span><br><span class="line">## docker run</span><br></pre></td></tr></table></figure></p><h1 id="创建一个新的容器并运行一个命令"><a href="#创建一个新的容器并运行一个命令" class="headerlink" title="创建一个新的容器并运行一个命令"></a>创建一个新的容器并运行一个命令</h1><p>   docker run [OPTIONS] IMAGE [COMMAND] [ARG…]<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS说明：</span><br><span class="line">- -d: 后台运行容器，并返回容器ID</span><br><span class="line">- -i: 以交互模式运行容器，通常与 -t 同时使用</span><br><span class="line">- --name: 为容器指定一个名称</span><br><span class="line">- --dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致</span><br><span class="line">- -m :设置容器使用内存最大值</span><br><span class="line">- -p: 映射宿主端口到内部容器开放的网络端口，可以多次使用-p来绑定多个端口</span><br></pre></td></tr></table></figure></p><p>   #使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx<br>   docker run –name mynginx -d nginx:latest</p><h1 id="使用镜像nginx-latest以后台模式启动一个容器-将容器的80端口映射到主机的80端口-主机的目录-data映射到容器的-data。"><a href="#使用镜像nginx-latest以后台模式启动一个容器-将容器的80端口映射到主机的80端口-主机的目录-data映射到容器的-data。" class="headerlink" title="使用镜像nginx:latest以后台模式启动一个容器,将容器的80端口映射到主机的80端口,主机的目录/data映射到容器的/data。"></a>使用镜像nginx:latest以后台模式启动一个容器,将容器的80端口映射到主机的80端口,主机的目录/data映射到容器的/data。</h1><p>   docker run -p 80:80 -v /data:/data -d nginx:latest</p><h1 id="使用镜像nginx-latest以交互模式启动一个容器-在容器内执行-bin-bash命令"><a href="#使用镜像nginx-latest以交互模式启动一个容器-在容器内执行-bin-bash命令" class="headerlink" title="使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令"></a>使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令</h1><p>   docker run -it nginx:latest /bin/bash<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## docker start/stop/restart   </span><br><span class="line"></span><br><span class="line">   - docker start :启动一个或多少已经被停止的容器</span><br><span class="line">   - docker stop :停止一个运行中的容器</span><br><span class="line">   - docker restart :重启容器</span><br><span class="line"></span><br><span class="line">## docker kill</span><br></pre></td></tr></table></figure></p><h1 id="杀掉运行中的容器mynginx"><a href="#杀掉运行中的容器mynginx" class="headerlink" title="杀掉运行中的容器mynginx"></a>杀掉运行中的容器mynginx</h1><p>   docker kill mynginx<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## docker rm</span><br></pre></td></tr></table></figure></p><h1 id="删除一个或多个容器"><a href="#删除一个或多个容器" class="headerlink" title="删除一个或多个容器"></a>删除一个或多个容器</h1><p>   docker rm [OPTIONS] CONTAINER [CONTAINER…]<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS说明：</span><br><span class="line">- -f :通过SIGKILL信号强制删除一个运行中的容器</span><br><span class="line">- -l :移除容器间的网络连接，而非容器本身</span><br><span class="line">- -v :删除与容器关联的卷</span><br></pre></td></tr></table></figure></p><h1 id="强制删除容器db01、db02"><a href="#强制删除容器db01、db02" class="headerlink" title="强制删除容器db01、db02"></a>强制删除容器db01、db02</h1><p>   docker rm -f db01、db02</p><h1 id="移除容器nginx01对容器db01的连接，连接名db"><a href="#移除容器nginx01对容器db01的连接，连接名db" class="headerlink" title="移除容器nginx01对容器db01的连接，连接名db"></a>移除容器nginx01对容器db01的连接，连接名db</h1><p>   docker rm -l db </p><h1 id="删除容器nginx01-并删除容器挂载的数据卷"><a href="#删除容器nginx01-并删除容器挂载的数据卷" class="headerlink" title="删除容器nginx01,并删除容器挂载的数据卷"></a>删除容器nginx01,并删除容器挂载的数据卷</h1><p>   docker rm -v nginx01<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## docker exec</span><br></pre></td></tr></table></figure></p><h1 id="在运行的容器中执行命令"><a href="#在运行的容器中执行命令" class="headerlink" title="在运行的容器中执行命令"></a>在运行的容器中执行命令</h1><p>   docker exec [OPTIONS] CONTAINER COMMAND [ARG…]<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">OPTIONS说明：</span><br><span class="line">- -d :分离模式: 在后台运行</span><br><span class="line">- -i :即使没有附加也保持STDIN 打开</span><br><span class="line">- -t :分配一个伪终端</span><br></pre></td></tr></table></figure></p><h1 id="在容器mynginx中开启一个交互模式的终端"><a href="#在容器mynginx中开启一个交互模式的终端" class="headerlink" title="在容器mynginx中开启一个交互模式的终端"></a>在容器mynginx中开启一个交互模式的终端</h1><p>   docker exec -it  mynginx /bin/bash</p><h1 id="在容器mynginx中以交互模式执行容器内-root-youj-sh脚本"><a href="#在容器mynginx中以交互模式执行容器内-root-youj-sh脚本" class="headerlink" title="在容器mynginx中以交互模式执行容器内/root/youj.sh脚本"></a>在容器mynginx中以交互模式执行容器内/root/youj.sh脚本</h1><p>   docker exec -it mynginx /bin/sh /root/youj.sh<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 容器操作</span><br><span class="line"></span><br><span class="line">## docker ps</span><br></pre></td></tr></table></figure></p><h1 id="列出所有在运行的容器信息"><a href="#列出所有在运行的容器信息" class="headerlink" title="列出所有在运行的容器信息"></a>列出所有在运行的容器信息</h1><pre><code>docker ps</code></pre><h1 id="列出最近创建的5个容器信息"><a href="#列出最近创建的5个容器信息" class="headerlink" title="列出最近创建的5个容器信息"></a>列出最近创建的5个容器信息</h1><pre><code>docker ps -n 5</code></pre><h1 id="列出所有创建的容器ID"><a href="#列出所有创建的容器ID" class="headerlink" title="列出所有创建的容器ID"></a>列出所有创建的容器ID</h1><pre><code>docker ps -a -q</code></pre>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">## docker top</span><br></pre></td></tr></table></figure><h1 id="查看容器mymysql的进程信息"><a href="#查看容器mymysql的进程信息" class="headerlink" title="查看容器mymysql的进程信息"></a>查看容器mymysql的进程信息</h1><p>   docker top mymysql<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## docker logs</span><br></pre></td></tr></table></figure></p><h1 id="跟踪查看容器mynginx的日志输出"><a href="#跟踪查看容器mynginx的日志输出" class="headerlink" title="跟踪查看容器mynginx的日志输出"></a>跟踪查看容器mynginx的日志输出</h1><p>   docker logs -f mynginx</p><h1 id="查看容器mynginx从2019年3月1日后的最新10条日志"><a href="#查看容器mynginx从2019年3月1日后的最新10条日志" class="headerlink" title="查看容器mynginx从2019年3月1日后的最新10条日志"></a>查看容器mynginx从2019年3月1日后的最新10条日志</h1><p>   docker logs –since=”2019-03-01” –tail=10 mynginx<br>   <code>`</code>    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;查看Docker信息&quot;&gt;&lt;a href=&quot;#查看Docker信息&quot; class=&quot;headerlink&quot; title=&quot;查看Docker信息&quot;&gt;&lt;/a&gt;查看Docker信息&lt;/h1&gt;   &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>docker学习(一)之Docker简介和安装</title>
    <link href="http://yoursite.com/2019/03/08/docker%E5%AD%A6%E4%B9%A0(%E4%B8%80)%E4%B9%8BDocker%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/03/08/docker学习(一)之Docker简介和安装/</id>
    <published>2019-03-08T11:01:45.000Z</published>
    <updated>2019-03-10T03:57:57.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><pre><code>Docker是开发人员和系统管理员使用容器开发，部署和运行应用程序的平台。使用Linux容器部署应用程序称为容器化。</code></pre><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li>Docker 启动快速属于秒级别。</li><li>Docker 需要的资源更少。Docker 在操作系统级别进行虚拟化，Docker 容器和内核交互，几乎没有性能损耗。</li><li>Docker 更轻量。Docker 的架构可以共用一个内核与共享应用程序库，所占内存极小。同样的硬件环境Docker 运行的镜像数远多于虚拟机数量，对系统的利用率非常高。</li><li>高可用和可恢复性。Docker 对业务的高可用支持是通过快速重新部署实现的。</li><li>虚拟化具备负载均衡，高可用，容错，迁移和数据保护等经过生产实践检验的成熟保障机制。<a id="more"></a></li><li>快速创建、删除。虚拟化创建是分钟级别的，Docker 容器创建是秒级别的，Docker 的快速迭代性，决定了无论是开发、测试、部署都可以节约大量时间</li></ul><h2 id="容器和镜像"><a href="#容器和镜像" class="headerlink" title="容器和镜像"></a>容器和镜像</h2><pre><code>一个容器通过镜像启动。镜像是一个可执行包，包含运行应用程序所需的所有内容——代码、运行时、库、环境变量和配置文件。容器是镜像运行时的实例  </code></pre><h2 id="容器和虚拟机"><a href="#容器和虚拟机" class="headerlink" title="容器和虚拟机"></a>容器和虚拟机</h2><pre><code>容器在Linux上本机运行，并与其他容器共享主机的内核。它运行一个独立的进程，不占用任何其他可执行文件的内存，使其轻量级。相比之下，虚拟机（VM）运行一个完整的“客户”操作系统，通过虚拟机管理程序对主机资源进行虚拟访问。通常，VM提供的环境比大多数应用程序需要的资源更多。    </code></pre><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><p><strong>卸载掉旧版本</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></p><p> <strong>安装依赖包</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">      device-mapper-persistent-data \</span><br><span class="line">      lvm2</span><br></pre></td></tr></table></figure></p><p> <strong>设置稳定版仓库</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></p><p><strong>安装最新版Docker CE</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></p><p><strong>启动Docker</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></p><p><strong>运行hellow-word镜像</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure></p><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><p><strong>卸载可能存在的旧版本</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure></p><p><strong>更新apt索引包</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p><p><strong>安装包通过https使用repository</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure></p><p><strong>添加Docker的官方GPG密钥</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></p><p><strong>更新apt包索引</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure></p><p><strong>安装最新版Docker CE</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></p><p><strong>PS:安装特定版本</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-cache madison docker-ce</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure><p><strong>运行hello-word镜像</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://dockone.io/article/8350" target="_blank" rel="noopener">http://dockone.io/article/8350</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker简介&quot;&gt;&lt;a href=&quot;#Docker简介&quot; class=&quot;headerlink&quot; title=&quot;Docker简介&quot;&gt;&lt;/a&gt;Docker简介&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Docker是开发人员和系统管理员使用容器开发，部署和运行应用程序的平台。使用Linux容器部署应用程序称为容器化。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;优势&quot;&gt;&lt;a href=&quot;#优势&quot; class=&quot;headerlink&quot; title=&quot;优势&quot;&gt;&lt;/a&gt;优势&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Docker 启动快速属于秒级别。&lt;/li&gt;
&lt;li&gt;Docker 需要的资源更少。Docker 在操作系统级别进行虚拟化，Docker 容器和内核交互，几乎没有性能损耗。&lt;/li&gt;
&lt;li&gt;Docker 更轻量。Docker 的架构可以共用一个内核与共享应用程序库，所占内存极小。同样的硬件环境Docker 运行的镜像数远多于虚拟机数量，对系统的利用率非常高。&lt;/li&gt;
&lt;li&gt;高可用和可恢复性。Docker 对业务的高可用支持是通过快速重新部署实现的。&lt;/li&gt;
&lt;li&gt;虚拟化具备负载均衡，高可用，容错，迁移和数据保护等经过生产实践检验的成熟保障机制。
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
</feed>
